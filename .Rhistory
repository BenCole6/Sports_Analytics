if (sum(Conf_Round_1[ , "Won_A"], na.rm = T) == 4 || sum(Conf_Round_1[ , "Won_B"], na.rm = T) == 4) {
break
} else {
Conf_Round_1[nrow(Conf_Round_1)+1 , c("Team_A",
"Team_B",
"Rating_A",
"Rating_B",
"Conference_A",
"Conference_B",
"Expected")] <- Conf_Round_1[nrow(Conf_Round_1) , c("Team_A",
"Team_B",
"Rating_A",
"Rating_B",
"Conference_A",
"Conference_B",
"Expected")]
Conf_Round_1[nrow(Conf_Round_1) , "Rand"] <- runif(1, 0, 1)
Conf_Round_1[nrow(Conf_Round_1) , "Won_A"] <- if_else(Conf_Round_1[nrow(Conf_Round_1) , "Rand"] <=
Conf_Round_1[nrow(Conf_Round_1) , "Expected"],
true = 1,
false = 0)
Conf_Round_1[nrow(Conf_Round_1) , "Won_B"] <- 1 - Conf_Round_1[ nrow(Conf_Round_1) , "Won_A"]
}
Conf_Round_1_Winner <- summarise(Conf_Round_1,
"Wins_A" = sum(Won_A),
"Wins_B" = sum(Won_B),
"Winner" = if_else(Wins_A == 4,
"Team_A", "Team_B"))
Winner_Suffix <- if_else(str_detect(Conf_Round_1_Winner$Winner,
"Team_A"),
true = "_A", false = "_B")
Conf_Round_1_Winner <- select(Conf_Round_1,
contains(Winner_Suffix))[1 ,]
colnames(Conf_Round_1_Winner) <- c("Team", "Rating", "Conference", "Won")
}
## Conference_Round_2
Conf_Round_2 <- rbind(Second_Round_3_Winner,
Second_Round_4_Winner)
Conf_Round_2[ , "Won"] <- NA
Conf_Round_2 <- transmute(Conf_Round_2,
Team_A = Team[1],
Team_B = Team[2],
Rating_A = Rating[1],
Rating_B = Rating[2],
Conference_A = Conference[1],
Conference_B = Conference[2])[1 , ]
Conf_Round_2 <- mutate(Conf_Round_2,
Expected = (1 /
(1 + 10^(-(Rating_B - Rating_A) / 400))),
"Rand" = NA,
"Won_A" = NA,
"Won_B" = NA)
for (i in 1:7) {
if (i == 1) {
Conf_Round_2[nrow(Conf_Round_2) , "Rand"] <- runif(1, 0, 1)
Conf_Round_2[nrow(Conf_Round_2) , "Won_A"] <- if_else(Conf_Round_2[nrow(Conf_Round_2) , "Rand"] <=
Conf_Round_2[nrow(Conf_Round_2) , "Expected"],
true = 1,
false = 0)
Conf_Round_2[nrow(Conf_Round_2) , "Won_B"] <- 1 - Conf_Round_2[ , "Won_A"]
}
if (sum(Conf_Round_2[ , "Won_A"], na.rm = T) == 4 || sum(Conf_Round_2[ , "Won_B"], na.rm = T) == 4) {
break
} else {
Conf_Round_2[nrow(Conf_Round_2)+1 , c("Team_A",
"Team_B",
"Rating_A",
"Rating_B",
"Conference_A",
"Conference_B",
"Expected")] <- Conf_Round_2[nrow(Conf_Round_2) , c("Team_A",
"Team_B",
"Rating_A",
"Rating_B",
"Conference_A",
"Conference_B",
"Expected")]
Conf_Round_2[nrow(Conf_Round_2) , "Rand"] <- runif(1, 0, 1)
Conf_Round_2[nrow(Conf_Round_2) , "Won_A"] <- if_else(Conf_Round_2[nrow(Conf_Round_2) , "Rand"] <=
Conf_Round_2[nrow(Conf_Round_2) , "Expected"],
true = 1,
false = 0)
Conf_Round_2[nrow(Conf_Round_2) , "Won_B"] <- 1 - Conf_Round_2[ nrow(Conf_Round_2) , "Won_A"]
}
Conf_Round_2_Winner <- summarise(Conf_Round_2,
"Wins_A" = sum(Won_A),
"Wins_B" = sum(Won_B),
"Winner" = if_else(Wins_A == 4,
"Team_A", "Team_B"))
Winner_Suffix <- if_else(str_detect(Conf_Round_2_Winner$Winner,
"Team_A"),
true = "_A", false = "_B")
Conf_Round_2_Winner <- select(Conf_Round_2,
contains(Winner_Suffix))[1 ,]
colnames(Conf_Round_2_Winner) <- c("Team", "Rating", "Conference", "Won")
}
Stanley_Cup_Round <- rbind(Conf_Round_1_Winner,
Conf_Round_2_Winner)
Stanley_Cup_Round[ , "Won"] <- NA
Stanley_Cup_Round <- transmute(Stanley_Cup_Round,
Team_A = Team[1],
Team_B = Team[2],
Rating_A = Rating[1],
Rating_B = Rating[2],
Conference_A = Conference[1],
Conference_B = Conference[2])[1 , ]
Stanley_Cup_Round <- mutate(Stanley_Cup_Round,
Expected = (1 /
(1 + 10^(-(Rating_B - Rating_A) / 400))),
"Rand" = NA,
"Won_A" = NA,
"Won_B" = NA)
for (i in 1:7) {
if (i == 1) {
Stanley_Cup_Round[nrow(Stanley_Cup_Round) , "Rand"] <- runif(1, 0, 1)
Stanley_Cup_Round[nrow(Stanley_Cup_Round) , "Won_A"] <- if_else(Stanley_Cup_Round[nrow(Stanley_Cup_Round) , "Rand"] <=
Stanley_Cup_Round[nrow(Stanley_Cup_Round) , "Expected"],
true = 1,
false = 0)
Stanley_Cup_Round[nrow(Stanley_Cup_Round) , "Won_B"] <- 1 - Stanley_Cup_Round[ , "Won_A"]
}
if (sum(Stanley_Cup_Round[ , "Won_A"], na.rm = T) == 4 || sum(Stanley_Cup_Round[ , "Won_B"], na.rm = T) == 4) {
break
} else {
Stanley_Cup_Round[nrow(Stanley_Cup_Round)+1 , c("Team_A",
"Team_B",
"Rating_A",
"Rating_B",
"Conference_A",
"Conference_B",
"Expected")] <- Stanley_Cup_Round[nrow(Stanley_Cup_Round) , c("Team_A",
"Team_B",
"Rating_A",
"Rating_B",
"Conference_A",
"Conference_B",
"Expected")]
Stanley_Cup_Round[nrow(Stanley_Cup_Round) , "Rand"] <- runif(1, 0, 1)
Stanley_Cup_Round[nrow(Stanley_Cup_Round) , "Won_A"] <- if_else(Stanley_Cup_Round[nrow(Stanley_Cup_Round) , "Rand"] <=
Stanley_Cup_Round[nrow(Stanley_Cup_Round) , "Expected"],
true = 1,
false = 0)
Stanley_Cup_Round[nrow(Stanley_Cup_Round) , "Won_B"] <- 1 - Stanley_Cup_Round[ nrow(Stanley_Cup_Round) , "Won_A"]
}
Stanley_Cup_Round_Winner <- summarise(Stanley_Cup_Round,
"Wins_A" = sum(Won_A),
"Wins_B" = sum(Won_B),
"Winner" = if_else(Wins_A == 4,
"Team_A", "Team_B"))
Winner_Suffix <- if_else(str_detect(Stanley_Cup_Round_Winner$Winner,
"Team_A"),
true = "_A", false = "_B")
Stanley_Cup_Round_Winner <- select(Stanley_Cup_Round,
contains(Winner_Suffix))[1 ,]
colnames(Stanley_Cup_Round_Winner) <- c("Team", "Rating", "Conference", "Won")
}
rbind(Monte_Results_Season,
Game_Monte_Sum)
str(Monte_Results_Season)
Monte_Results_Season
rbind(Monte_Results_Season,
Game_Monte_Sum)
Monte_Results_Season
Monte_Results_Season <- rbind(Monte_Results_Season,
Game_Monte_Sum)
Monte_Results_Season
rbind(Monte_Results_First_Round,
First_Round_1,
First_Round_2,
First_Round_3,
First_Round_4,
First_Round_5,
First_Round_6,
First_Round_7,
First_Round_8)
Game_Monte_Sum
is_grouped_df(Game_Monte_Sum)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
Monte_Results_Conf_Round
Monte_Results_Season
nrow(Monte_Results_Season) / 5
Monte_Results_Conf_Round
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
rm(list=ls())
gc()
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
Monte_Results_Stanley_Round
for (sim_no in 1:5){
print(sim_no)
}
rm(list=ls())
gc()
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
Monte_Results_Conf_Round
Monte_Results_Stanley_Round
unique(Game_Monte_Sum$Sim_No)
Game_Monte_Sum
ls()
ls()[which(ls() == "First_Round_*")]
ls()[which(str_detect(ls(), "First_Round_"))]
ls()[which(str_detect(ls(), "First_Round_\\d\\$"))]
ls()[which(str_detect(ls(), "First_Round_\\d"))]
ls()[which(str_detect(ls(), "First_Round_\\d$"))]
for (round_ind in ls()[which(str_detect(ls(), "First_Round_\\d$"))] ) {
print(round_ind)
}
for (round_ind in ls()[which(str_detect(ls(), "First_Round_\\d$"))] ) {
print(as.name(round_ind))
}
for (round_ind in ls()[which(str_detect(ls(), "First_Round_\\d$"))] ) {
print(quo(round_ind))
}
for (round_ind in ls()[which(str_detect(ls(), "First_Round_\\d$"))] ) {
as.name(round_ind)
}
for (round_ind in ls()[which(str_detect(ls(), "First_Round_\\d$"))] ) {
print(round_ind)
}
for (round_ind in ls()[which(str_detect(ls(), "First_Round_\\d$"))] ) {
head(round_ind)
}
for (round_ind in ls()[which(str_detect(ls(), "First_Round_\\d$"))] ) {
print(head(round_ind))
}
for (round_ind in ls()[which(str_detect(ls(), "First_Round_\\d$"))] ) {
print(get(round_ind))
}
temp <- get(round_ind)
temp
temp <- mutate(temp,
Sim_No = sim_no)
temp
as.name(round_ind)
rm(First_Round_8)
as.name(round_ind) <- temp
as.name(round_ind)
for(zzz in 1:6) { #-- Create objects  'r.1', 'r.2', ... 'r.6' --
nam <- paste("r", zzz, sep = ".")
assign(nam, 1:zzz)
}
r.1
r.2
round_ind
First_Round_8
assign(round_ind, temp)
First_Round_8
for (round_ind in ls()[which(str_detect(ls(), "First_Round_\\d$"))] ) {
temp <- get(round_ind)
temp <- mutate(temp,
Sim_No = sim_no)
assign(round_ind, temp)
}
First_Round_2
First_Round_6
Monte_Results_Stanley_Round
rm(list = ls())
gc()
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
Monte_Results_Stanley_Round
Stanley_Cup_Round_Winner
Monte_Results
ggplot(Monte_Results_Conf_Round,
aes(x = Points)) +
geom_density( fill = "cyan2",
alpha = 0.25) +
facet_wrap( ~ Team_Name) +
theme_minimal()
Monte_Results_Conf_Round
Monte_Results_Season
ggplot(Monte_Results_Season,
aes(x = Points)) +
geom_density( fill = "cyan2",
alpha = 0.25) +
facet_wrap( ~ Team_Name) +
theme_minimal()
ggplot(Monte_Results_Season,
aes(x = Position)) +
geom_density( fill = "cyan2",
alpha = 0.25) +
facet_wrap( ~ Team_Name) +
theme_minimal()
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
St_Louis_Results <- filter(summarise(group_by(Monte_Results_Season,
Team_Name, Position),
"Count" = n()),
Team_Name == "St. Louis Blues")
ggplot(St_Louis_Results,
aes(x = Position, y = Count)) +
geom_bar(stat = "identity",
col = "yellow",
fill = "blue3") +
ggtitle("Frequencies of Finishing Position for St. Louis Blues") +
scale_x_continuous(breaks = seq(1,31,2))+
theme_minimal() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank())
ggplot(St_Louis_Results,
aes(x = Position, y = Count)) +
geom_bar(stat = "identity",
col = "yellow",
fill = "blue3") +
ggtitle("Frequencies of Finishing Position for St. Louis Blues") +
scale_x_continuous(breaks = seq(1,31,2))+
theme_minimal() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank())
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
ggplot(St_Louis_Results,
aes(x = Points, y = Count)) +
geom_bar(stat = "identity",
col = "yellow",
fill = "blue3") +
ggtitle("Frequencies of Finishing Position for St. Louis Blues") +
scale_x_continuous(breaks = seq(1,31,2))+
theme_minimal() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank())
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
ggplot(St_Louis_Results,
aes(x = Position, y = Count)) +
geom_bar(stat = "identity",
col = "yellow",
fill = "blue3") +
ggtitle("Frequencies of Finishing Position for St. Louis Blues") +
scale_x_continuous(breaks = seq(1,31,2))+
theme_minimal() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank())
Stanley_Cup_Round_Winner
Monte_Results_Stanley_Round
sort(unique(Monte_Results_Stanley_Round$Sim_No))
sort(unique(Monte_Results_Stanley_Round$Sim_No)) == seq(0,1)
sort(unique(Monte_Results_Stanley_Round$Sim_No)) == seq(0,100)
c(sort(unique(Monte_Results_Stanley_Round$Sim_No))) == seq(0,100)
c(sort(unique(Monte_Results_Stanley_Round$Sim_No))) == seq(1,100)
sort(unique(Monte_Results_Stanley_Round$Sim_No)) == seq(1,100)
Monte_Results_Stanley_Round
gather(Monte_Results_Stanley_Round,
Team_A, Team_B,
key = "Team",
value = "Team_Name")
Game_Monte_Sum
Monte_Results_Stanley_Round_Long <- gather(Monte_Results_Stanley_Round,
Team_A, Team_B,
key = "Team",
value = "Team_Name")
Monte_Results_Stanley_Round_Long
summarise(group_by(Monte_Results_Stanley_Round_Long,
Team_Name),
"Times_Won_Stanley" = sum(Won_A))
sim_no
View(Monte_Results_Stanley_Round_Long)
gather(Monte_Results_Stanley_Round,
Team_A, Team_B,
Won_A, Won_B,
key = "Team",
value = "Team_Name")
View(gather(Monte_Results_Stanley_Round,
Team_A, Team_B,
Won_A, Won_B,
key = "Team",
value = "Team_Name"))
Monte_Results_Stanley_Round
Game_Monte_Long
sum(ungroup(Game_Monte_Sum),)
Game_Monte_Long
Game_Monte_Sum
sum(ungroup(Game_Monte_Sum)$Points)
sum(ungroup(Game_Monte_Sum)$Points) /31
mean(Game_Monte_Sum$Points)
mean(Game_Monte_Sum$Position)
Game_Monte
Monte_Results_Stanley_Round_Long
Monte_Results_Stanley_Round_Long <- gather(Monte_Results_Stanley_Round,
Team_A, Team_B,
key = "Team_Order",
value = "Team_Name")
Game_Monte_Long
Monte_Results_Stanley_Round_Long
summarise(group_by(Monte_Results_Stanley_Round_Long,
Team_Name),
"Times_Won_Stanley" = sum(Won_A))
View(Monte_Results_Stanley_Round)
Stanley_Cup_Round_Winner
Stanley_Cup_Round
Stanley_Cup_Round_Winner
Stanley_Cup_Round
summarise(Stanley_Cup_Round,
"Wins_A" = sum(Won_A),
"Wins_B" = sum(Won_B),
"Winner" = if_else(Wins_A == 4,
"Team_A", "Team_B"))
Winner_Suffix
select(Stanley_Cup_Round,
contains(Winner_Suffix))[1 ,]
select(Stanley_Cup_Round,
contains(Winner_Suffix))
Stanley_Cup_Round_Winner[nrow(Stanley_Cup_Round_Winner), ]
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
Stanley_Cup_Round_Winner
Monte_Results_Stanley_Round
Stanley_Cup_Round_Winner
mutate(Stanley_Cup_Round_Winner,
Sim_No = sim_no)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
Monte_Results_Stanley_Round_Winner
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
Monte_Results_Stanley_Round_Winner
View(Monte_Results_Stanley_Round_Winner)
ggplot(Monte_Results_Stanley_Round_Winner,
aes(x = Team)) +
geom_histogram()
ggplot(Monte_Results_Stanley_Round_Winner,
aes(x = Team)) +
geom_bar()
filter(Elo_25, Team == "Buffalo Sabers")
Elo_25
filter(Elo_25, str_detect(Team, "Buffalo"))
max(Elo_25$Rating)
mean(Elo_25$Rating)
View(Monte_Results_First_Round)
View(First_Round_1)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
View(First_Round_1)
View(First_Round_2)
View(First_Round_3)
View(First_Round_4)
View(First_Round_5)
View(First_Round_6)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
View(First_Round_1)
View(First_Round_2)
View(First_Round_3)
View(Second_Round_1)
View(Conf_Round_1)
View(Stanley_Cup_Round)
View(Monte_Results_Stanley_Round_Winner)
filter(Elo_25,
Team == "St. Louis Blues")
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
Monte_Results_Stanley_Round_Winner
ggplot(Monte_Results_Stanley_Round_Winner) +
geom_bar(aes(x = Team))
ggplot(Monte_Results_Stanley_Round_Winner) +
geom_bar(aes(x = Team)) +
theme_minimal() +
coord_flip()
summarise(group_by(Monte_Results_Stanley_Round_Winner,
Team),
No_Cups = sum(Won))
summarise(group_by(Monte_Results_Stanley_Round_Winner,
Team),
No_Cups = sum(Won))
Monte_Results_Stanley_Round_Winner
Monte_Results_Stanley_Round_Winner[ , 4]
Monte_Results_Stanley_Round_Winner
colnames(Monte_Results_Stanley_Round_Winner) <- c("Team",
"Rating",
"Conference",
"Won",
"Sim_No")
summarise(group_by(Monte_Results_Stanley_Round_Winner,
Team),
No_Cups = sum(Won))
Stanle_Cup_Frequencies <- summarise(group_by(Monte_Results_Stanley_Round_Winner,
Team),
No_Cups = sum(Won))
View(Stanle_Cup_Frequencies)
181 / 10000
Stanley_Cup_Frequencies <- summarise(group_by(Monte_Results_Stanley_Round_Winner,
Team),
No_Cups = sum(Won),
Likelihood = No_Cups / sum(ungroup(Monte_Results_Stanley_Round_Winner)$Won))
Stanley_Cup_Frequencies
cat(Sys.time() - Start_Time)
paste(Sys.time() - Start_Time)
Sys.time() - Start_Time
sim_no
cat("Sim_No:\t",
sim_no)
Monte_Results_First_Round
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
rm(list=ls())
gc()
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Cleanning_for_Monte.R', echo=TRUE)
source('~/RMIT/2019 RMIT SEM 1/SPORTS ANALYTICS/Course_Project/Monte_Carlo.R', echo=TRUE)
View(Elo_50)
View(Elo_Season)
View(Elo_25)
